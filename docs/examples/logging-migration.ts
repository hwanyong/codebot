// filepath: /Users/uhd/Documents/Projects/1.PERSONAL/03.Projects/codebot/docs/examples/logging-migration.ts
import { Logger } from '../../src/utils/logger.js';
import { logDebug, logError, logInfo, logTime, LogLevel, log } from '../../src/utils/console-utils.js';

/**
 * 로깅 마이그레이션 예제
 * Logging migration examples
 *
 * Generated by Copilot
 */

// 기존 방식 - Before Migration
// -----------------------------

// 기본 콘솔 로그
console.log('사용자가 로그인했습니다.');

// 오류 로깅
try {
  throw new Error('데이터베이스 연결 실패');
} catch (error) {
  console.error('오류 발생:', error);
}

// 디버깅 정보
console.log('디버그 정보:', { userId: 123, action: 'login' });

// 개선된 방식 - After Migration
// -----------------------------

// 기본 정보 로깅
logInfo('사용자가 로그인했습니다.');

// 오류 로깅
try {
  throw new Error('데이터베이스 연결 실패');
} catch (error) {
  logError('데이터베이스 연결 중 오류 발생', error);
}

// 디버깅 정보
logDebug('사용자 액션 디버깅', { userId: 123, action: 'login' });

// 실행 시간 측정 및 기록
async function fetchUserProfile(userId: number) {
  // 시뮬레이션된 API 호출
  await new Promise(resolve => setTimeout(resolve, 200));
  return { id: userId, name: '홍길동', email: 'user@example.com' };
}

// 함수 실행 및 시간 기록
async function demonstrateLogging() {
  // 실행 시간 측정 및 로깅
  const userProfile = await logTime('fetchUserProfile', async () => {
    return await fetchUserProfile(123);
  });

  // 로그 레벨 사용
  log(LogLevel.INFO, '프로필 정보 검색 완료', { profileId: userProfile.id });

  // 조건부 로깅 - 로거 상태 확인
  if (Logger.isVerbose()) {
    // 상세 정보는 verbose 모드일 때만 표시
    logInfo('상세 프로필 정보', userProfile);
  }

  if (Logger.isDebug()) {
    // 디버그 정보는 debug 모드일 때만 표시
    logDebug('API 응답 세부 정보', {
      responseTime: 200,
      cacheStatus: 'miss',
      endpoint: '/api/users/123'
    });
  }

  // AI 스트리밍 가시성 확인
  if (Logger.isStreamEnabled('profileProcessor')) {
    console.log('프로필 스트리밍 활성화됨 - 전체 데이터를 출력합니다.');
  }
}

// 로깅 예제 실행
demonstrateLogging().catch(error => {
  logError('예제 실행 중 오류 발생', error);
});