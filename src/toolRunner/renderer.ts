/**
 * 도구 실행 결과를 시각화하는 ResultRenderer 클래스
 * ResultRenderer class for visualizing tool execution results
 *
 * Generated by Copilot
 */

import chalk from 'chalk';
import { BaseTool } from '../tools/base.js';
import { ToolExecutionResult } from './executor.js';
import { I18n } from '../config/i18n.js';

/**
 * 도구 실행 결과를 시각화하는 클래스
 */
export class ResultRenderer {
  private _i18n: I18n;

  /**
   * ResultRenderer 클래스의 생성자
   */
  constructor() {
    this._i18n = I18n.getInstance();
  }

  /**
   * 도구 실행 결과를 화면에 렌더링합니다.
   * @param tool 실행된 도구
   * @param parameters 도구 실행에 사용된 파라미터
   * @param result 도구 실행 결과
   */
  public renderResult(
    tool: BaseTool,
    parameters: Record<string, any>,
    result: ToolExecutionResult
  ): void {
    console.log('\n' + '='.repeat(50));
    console.log(chalk.cyan(this._i18n.t('tool_execution_result')));
    console.log('='.repeat(50));

    // 도구 정보 표시
    console.log(chalk.bold(this._i18n.t('tool_info')));
    console.log(`${chalk.cyan(this._i18n.t('name'))}: ${tool.name}`);
    console.log(`${chalk.cyan(this._i18n.t('description'))}: ${tool.description}`);
    console.log(`${chalk.cyan(this._i18n.t('category'))}: ${tool.category || 'general'}`);

    // 파라미터 표시
    console.log('\n' + chalk.bold(this._i18n.t('parameters')));
    this._renderJson(parameters);

    // 실행 결과 표시
    console.log('\n' + chalk.bold(this._i18n.t('result')));

    // 성공/실패 상태 표시
    const statusIcon = result.success ? '✓' : '✗';
    const statusColor = result.success ? chalk.green : chalk.red;
    console.log(
      `${chalk.cyan(this._i18n.t('status'))}: ` +
      statusColor(`${statusIcon} ${result.success ? this._i18n.t('success') : this._i18n.t('failure')}`)
    );

    // 실행 시간 표시
    console.log(`${chalk.cyan(this._i18n.t('execution_time'))}: ${result.duration}ms`);

    // 결과 데이터 또는 오류 표시
    if (result.success) {
      console.log('\n' + chalk.bold(this._i18n.t('output_data')));
      this._renderOutput(result.data);
    } else {
      console.log('\n' + chalk.bold.red(this._i18n.t('error')));
      console.log(chalk.red(result.error?.message || this._i18n.t('unknown_error')));

      // 디버그 모드에서는 스택 트레이스 표시
      if (process.env.DEBUG && result.error?.stack) {
        console.log('\n' + chalk.gray(result.error.stack));
      }
    }

    console.log('='.repeat(50) + '\n');
  }

  /**
   * JSON 객체를 시각적으로 표시합니다.
   * @param data 표시할 JSON 데이터
   * @private
   */
  private _renderJson(data: Record<string, any>): void {
    if (!data || Object.keys(data).length === 0) {
      console.log(chalk.gray(this._i18n.t('empty_object')));
      return;
    }

    try {
      console.log(this._colorizeJson(JSON.stringify(data, null, 2)));
    } catch (error) {
      console.log(chalk.red(this._i18n.t('json_render_error')));
      console.log(String(data));
    }
  }

  /**
   * 도구 실행 결과를 데이터 타입에 따라 적절히 표시합니다.
   * @param output 도구 실행 결과 데이터
   * @private
   */
  private _renderOutput(output: any): void {
    if (output === undefined || output === null) {
      console.log(chalk.gray(this._i18n.t('no_output')));
      return;
    }

    // 문자열인 경우
    if (typeof output === 'string') {
      console.log(output);
      return;
    }

    // 간단한 원시 타입인 경우
    if (typeof output === 'number' || typeof output === 'boolean') {
      console.log(String(output));
      return;
    }

    // 객체 또는 배열인 경우
    try {
      console.log(this._colorizeJson(JSON.stringify(output, null, 2)));
    } catch (error) {
      // JSON으로 직렬화할 수 없는 경우
      console.log(String(output));
    }
  }

  /**
   * JSON 문자열에 색상을 입히는 함수
   * @param json JSON 문자열
   * @returns 색상이 적용된 JSON 문자열
   * @private
   */
  private _colorizeJson(json: string): string {
    // 키와 문자열 값에 색상 적용
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, (match) => {
      let color = chalk.yellow; // 문자열은 노란색

      if (/^".*":$/.test(match)) {
        color = chalk.cyan; // 키는 청록색
      } else if (/true|false/.test(match)) {
        color = chalk.green; // 불린값은 녹색
      } else if (/null/.test(match)) {
        color = chalk.gray; // null은 회색
      } else if (/^-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?$/.test(match)) {
        color = chalk.magenta; // 숫자는 자주색
      }

      return color(match);
    });
  }
}