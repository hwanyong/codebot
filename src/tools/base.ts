/**
 * 도구(Tool) 기본 클래스
 * Base Tool class
 *
 * 모든 도구는 이 기본 클래스를 상속받아야 합니다.
 * All tools should inherit from this base class.
 *
 * Generated by Copilot
 */

import { z } from 'zod';

/**
 * 기본 도구 클래스
 * Base tool class that all tools should extend
 */
export abstract class BaseTool<TParams = any, TResult = any> {
  /**
   * 도구 이름
   * Tool name
   */
  public name: string;

  /**
   * 도구 설명
   * Tool description
   */
  public description: string;

  /**
   * 도구 카테고리
   * Tool category
   */
  public category: string;

  /**
   * 매개변수 스키마
   * Parameter schema
   */
  public parameterSchema?: z.ZodObject<any>;

  /**
   * 생성자
   * @param name 도구 이름 / Tool name
   * @param description 도구 설명 / Tool description
   * @param category 도구 카테고리 / Tool category
   * @param parameterSchema 매개변수 스키마 / Parameter schema
   */
  constructor(
    name: string,
    description: string,
    category: string = 'general',
    parameterSchema?: z.ZodObject<any>
  ) {
    this.name = name;
    this.description = description;
    this.category = category;
    this.parameterSchema = parameterSchema;
  }

  /**
   * 도구 실행 메서드
   * Tool execution method
   *
   * @param params 도구 실행에 필요한 매개변수 / Parameters needed to execute the tool
   * @returns 도구 실행 결과 / Tool execution result
   */
  public async execute(params: TParams): Promise<TResult> {
    // 매개변수 검증
    // Validate parameters
    if (this.parameterSchema) {
      try {
        params = this.parameterSchema.parse(params) as TParams;
      } catch (error) {
        if (error instanceof z.ZodError) {
          const formattedErrors = error.errors.map(err =>
            `${err.path.join('.')}: ${err.message}`
          ).join(', ');
          throw new Error(`Invalid parameters: ${formattedErrors}`);
        }
        throw error;
      }
    }

    // 실제 구현은 상속받는 클래스에서 정의
    // Actual implementation is defined in inheriting classes
    return this._execute(params);
  }

  /**
   * 도구 실제 실행 메서드 (하위 클래스에서 구현)
   * Actual tool execution method (to be implemented by subclasses)
   *
   * @param params 도구 실행에 필요한 매개변수 / Parameters needed to execute the tool
   * @returns 도구 실행 결과 / Tool execution result
   */
  protected abstract _execute(params: TParams): Promise<TResult>;
}