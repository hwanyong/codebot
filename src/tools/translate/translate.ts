/**
 * 번역 도구
 * Translation Tool
 *
 * 텍스트를 한국어와 영어 간에 번역합니다.
 * Translates text between Korean and English.
 *
 * Generated by Copilot
 */

import { BaseTool } from '../base.js';
import { z } from 'zod';
import { I18n } from '../../config/i18n.js';

// 지원하는 언어 타입
export type TranslationLanguage = 'ko' | 'en';

/**
 * 간단한 번역 도구
 * 현재는 영어와 한국어 간의 번역만 지원합니다.
 */
export class TranslateTool extends BaseTool<{
  text: string;
  targetLanguage: TranslationLanguage;
}, {
  originalText: string;
  translatedText: string;
  sourceLanguage: TranslationLanguage;
  targetLanguage: TranslationLanguage;
}> {
  private _i18n: I18n;

  constructor() {
    super(
      'Translate',
      '텍스트를 한국어와 영어 간에 번역합니다.',
      'translate',
      z.object({
        text: z.string().describe('번역할 텍스트'),
        targetLanguage: z.enum(['ko', 'en']).describe('대상 언어 (ko 또는 en)')
      })
    );

    this._i18n = I18n.getInstance();
  }

  /**
   * 텍스트를 번역합니다.
   * 현재는 간단한 구현으로, 실제 번역에는 외부 API를 사용하는 것이 좋습니다.
   *
   * @param params.text 번역할 텍스트
   * @param params.targetLanguage 대상 언어 코드 (ko 또는 en)
   * @returns 번역 결과
   */
  protected async _execute(params: { text: string; targetLanguage: TranslationLanguage }): Promise<{
    originalText: string;
    translatedText: string;
    sourceLanguage: TranslationLanguage;
    targetLanguage: TranslationLanguage;
  }> {
    try {
      const { text, targetLanguage } = params;

      // 원본 언어 감지 (간단한 구현)
      const sourceLanguage = this._detectLanguage(text);

      // 이미 대상 언어로 되어 있는 경우
      if (sourceLanguage === targetLanguage) {
        return {
          originalText: text,
          translatedText: text,
          sourceLanguage,
          targetLanguage
        };
      }

      // 번역 수행
      const translatedText = await this._translateText(text, sourceLanguage, targetLanguage);

      return {
        originalText: text,
        translatedText,
        sourceLanguage,
        targetLanguage
      };
    } catch (error) {
      throw new Error(`번역 실패: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * 텍스트의 언어를 감지합니다.
   * 간단한 구현으로, 한글이 포함되어 있으면 한국어로 판단합니다.
   *
   * @param text 감지할 텍스트
   * @returns 감지된 언어 코드
   * @private
   */
  private _detectLanguage(text: string): TranslationLanguage {
    // 한글 문자 범위 정규식: 가-힣
    const koreanRegex = /[가-힣]/;

    // 한글이 포함되어 있으면 한국어로 판단
    if (koreanRegex.test(text)) {
      return 'ko';
    }

    // 기본적으로 영어로 판단
    return 'en';
  }

  /**
   * 실제 번역을 수행합니다.
   * 실제 구현에서는 외부 번역 API를 사용해야 합니다.
   * 현재는 간단한 예시로만 구현됨.
   *
   * @param text 번역할 텍스트
   * @param sourceLanguage 원본 언어
   * @param targetLanguage 대상 언어
   * @returns 번역된 텍스트
   * @private
   */
  private async _translateText(
    text: string,
    sourceLanguage: TranslationLanguage,
    targetLanguage: TranslationLanguage
  ): Promise<string> {
    // 간단한 샘플 번역 구현
    // 실제 구현에서는 외부 API를 사용해야 함

    // 예시로 몇 가지 단어만 번역
    const koreanToEnglish: Record<string, string> = {
      '안녕하세요': 'Hello',
      '감사합니다': 'Thank you',
      '네': 'Yes',
      '아니오': 'No',
      '컴퓨터': 'Computer',
      '도구': 'Tool',
      '번역': 'Translation'
    };

    const englishToKorean: Record<string, string> = {
      'Hello': '안녕하세요',
      'Thank you': '감사합니다',
      'Yes': '네',
      'No': '아니오',
      'Computer': '컴퓨터',
      'Tool': '도구',
      'Translation': '번역'
    };

    // 원본 언어에 따라 적절한 번역 매핑 선택
    const translationMap = sourceLanguage === 'ko' ? koreanToEnglish : englishToKorean;

    // 간단한 방식으로 매핑된 단어 교체
    // 실제 구현에서는 이 방식은 적합하지 않음
    let translatedText = text;

    Object.entries(translationMap).forEach(([key, value]) => {
      translatedText = translatedText.replace(new RegExp(key, 'g'), value);
    });

    return translatedText;
  }
}