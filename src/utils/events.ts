/**
 * 노드 실행 상태를 나타내는 이벤트 타입
 * 노드 실행 상태 이벤트 타입
 */
export enum NodeEventType {
  /** 노드 실행 시작 */
  START = 'start',
  /** 노드 실행 종료 */
  END = 'end',
  /** 모델 응답 시작 */
  MODEL_START = 'model_start',
  /** 모델 응답 진행 중 */
  MODEL_STREAMING = 'model_streaming',
  /** 모델 응답 종료 */
  MODEL_END = 'model_end',
  /** 노드 실행 오류 */
  ERROR = 'error'
}

/**
 * 노드 이벤트 데이터 인터페이스
 */
export interface NodeEventData {
  /** 노드 이름 */
  nodeName: string;
  /** 이벤트 타입 */
  eventType: NodeEventType;
  /** 이벤트 관련 데이터 */
  payload?: any;
}

/**
 * 노드 이벤트 핸들러 타입
 */
export type NodeEventHandler = (data: NodeEventData) => void;

/**
 * 이벤트 관리자 인터페이스
 */
export interface EventManagerInterface {
  /** 이벤트 등록 */
  on(eventType: NodeEventType, handler: NodeEventHandler): void;
  /** 이벤트 해제 */
  off(eventType: NodeEventType, handler: NodeEventHandler): void;
  /** 이벤트 발생 */
  emit(data: NodeEventData): void;
}

/**
 * 싱글톤 이벤트 관리자 클래스
 *
 * Generated by Copilot
 */
export class EventManager implements EventManagerInterface {
  private static _instance: EventManager;
  private _handlers: Map<NodeEventType, Set<NodeEventHandler>>;

  private constructor() {
    this._handlers = new Map();
    Object.values(NodeEventType).forEach((type) => {
      this._handlers.set(type as NodeEventType, new Set());
    });
  }

  /**
   * 이벤트 관리자 싱글톤 인스턴스 반환
   */
  public static getInstance(): EventManager {
    if (!EventManager._instance) {
      EventManager._instance = new EventManager();
    }
    return EventManager._instance;
  }

  /**
   * 이벤트 핸들러 등록
   * @param eventType 이벤트 타입
   * @param handler 핸들러 함수
   */
  public on(eventType: NodeEventType, handler: NodeEventHandler): void {
    const handlers = this._handlers.get(eventType);
    if (handlers) {
      handlers.add(handler);
    }
  }

  /**
   * 이벤트 핸들러 해제
   * @param eventType 이벤트 타입
   * @param handler 핸들러 함수
   */
  public off(eventType: NodeEventType, handler: NodeEventHandler): void {
    const handlers = this._handlers.get(eventType);
    if (handlers) {
      handlers.delete(handler);
    }
  }

  /**
   * 이벤트 발생
   * @param data 이벤트 데이터
   */
  public emit(data: NodeEventData): void {
    const handlers = this._handlers.get(data.eventType);
    if (handlers) {
      handlers.forEach((handler) => {
        try {
          handler(data);
        } catch (error) {
          console.error(`Error in event handler for ${data.eventType}:`, error);
        }
      });
    }
  }
}