import chalk from 'chalk';
import { EventManager, NodeEventType } from './events.js';

/**
 * Logger configuration interface
 * 로거 구성 인터페이스
 */
export interface LoggerConfig {
  /** Enable verbose logging */
  verbose?: boolean;
  /** Enable debug logging */
  debug?: boolean;
  /** Enable graph state logging */
  graphState?: boolean;
  /** Enable tool logging */
  tools?: boolean;
}

/**
 * Logger class for managing application logs
 * 애플리케이션 로그를 관리하는 로거 클래스
 *
 * Generated by Copilot
 */
export class Logger {
  private static _config: LoggerConfig = {
    verbose: false,
    debug: false,
    graphState: false,
    tools: true
  };

  private static _eventManager = EventManager.getInstance();

  /**
   * Configure logger settings
   * 로거 설정 구성
   * @param config Logger configuration
   */
  public static configure(config: LoggerConfig): void {
    Logger._config = { ...Logger._config, ...config };
  }

  /**
   * Log node entry
   * 노드 진입 로깅
   * @param nodeName Node name
   */
  public static nodeEntry(nodeName: string): void {
    if (Logger._config.verbose) {
      console.log(chalk.cyan(`[${nodeName}] Entry`));
    }

    // 노드 시작 이벤트 방출
    Logger._eventManager.emit({
      nodeName,
      eventType: NodeEventType.START
    });
  }

  /**
   * Log node action
   * 노드 액션 로깅
   * @param nodeName Node name
   * @param action Action description
   */
  public static nodeAction(nodeName: string, action: string): void {
    if (Logger._config.verbose) {
      console.log(chalk.blue(`[${nodeName}] ${action}`));
    }
  }

  /**
   * Log node model activity start
   * 노드 모델 활동 시작 로깅
   * @param nodeName Node name
   * @param action Action description
   */
  public static nodeModelStart(nodeName: string, action: string): void {
    if (Logger._config.verbose) {
      console.log(chalk.magenta(`[${nodeName}] ${action}`));
    }

    // 모델 시작 이벤트 방출
    Logger._eventManager.emit({
      nodeName,
      eventType: NodeEventType.MODEL_START,
      payload: { action }
    });
  }

  /**
   * Log node model streaming
   * 노드 모델 스트리밍 로깅
   * @param nodeName Node name
   * @param content Stream content
   */
  public static nodeModelStreaming(nodeName: string, content: string): void {
    // 모델 스트리밍 이벤트 방출
    Logger._eventManager.emit({
      nodeName,
      eventType: NodeEventType.MODEL_STREAMING,
      payload: { content }
    });
  }

  /**
   * Log node model activity end
   * 노드 모델 활동 종료 로깅
   * @param nodeName Node name
   */
  public static nodeModelEnd(nodeName: string): void {
    // 모델 종료 이벤트 방출
    Logger._eventManager.emit({
      nodeName,
      eventType: NodeEventType.MODEL_END
    });
  }

  /**
   * Log node exit
   * 노드 종료 로깅
   * @param nodeName Node name
   * @param status Exit status
   */
  public static nodeExit(nodeName: string, status: string = 'success'): void {
    if (Logger._config.verbose) {
      const statusColor = status === 'success' ? chalk.green : chalk.red;
      console.log(statusColor(`[${nodeName}] Exit (${status})`));
    }

    // 노드 종료 이벤트 방출
    Logger._eventManager.emit({
      nodeName,
      eventType: NodeEventType.END,
      payload: { status }
    });
  }

  /**
   * Log error
   * 오류 로깅
   * @param message Error message
   * @param error Error object
   */
  public static error(message: string, error?: any): void {
    console.error(chalk.red(`[ERROR] ${message}`));
    if (error && Logger._config.debug) {
      console.error(error);
    }

    // 오류 이벤트 방출
    Logger._eventManager.emit({
      nodeName: 'system',
      eventType: NodeEventType.ERROR,
      payload: { message, error }
    });
  }

  /**
   * Log debug message
   * 디버그 메시지 로깅
   * @param message Debug message
   * @param data Optional debug data
   */
  public static debug(message: string, data?: any): void {
    if (Logger._config.debug) {
      console.log(chalk.yellow(`[DEBUG] ${message}`));
      if (data) {
        console.log(data);
      }
    }
  }

  /**
   * Log graph state
   * 그래프 상태 로깅
   * @param label State label
   * @param state State data
   */
  public static graphState(label: string, state: any): void {
    if (Logger._config.graphState) {
      console.log(chalk.green(`[STATE] ${label}:`));
      console.log(state);
    }
  }

  /**
   * Log tool execution
   * 도구 실행 로깅
   * @param tool Tool name
   * @param input Tool input
   */
  public static toolExecution(tool: string, input: any): void {
    if (Logger._config.tools) {
      console.log(chalk.yellow(`[TOOL] Executing: ${tool}`));
      console.log(chalk.yellow(`[TOOL] Input:`), input);
    }
  }

  /**
   * Log tool result
   * 도구 결과 로깅
   * @param tool Tool name
   * @param result Tool result
   * @param success Success flag
   */
  public static toolResult(tool: string, result: any, success: boolean): void {
    if (Logger._config.tools) {
      const statusColor = success ? chalk.green : chalk.red;
      console.log(statusColor(`[TOOL] Result from ${tool}: ${success ? 'Success' : 'Failed'}`));
      console.log(result);
    }
  }
}