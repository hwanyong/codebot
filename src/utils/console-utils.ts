// filepath: /Users/uhd/Documents/Projects/1.PERSONAL/03.Projects/codebot/src/utils/console-utils.ts
import { Logger } from './logger.js';
import chalk from 'chalk';

/**
 * Logging levels
 * 로깅 레벨
 *
 * Generated by Copilot
 */
export enum LogLevel {
  ERROR = 0,
  WARN = 1,
  INFO = 2,
  DEBUG = 3,
  TRACE = 4
}

/**
 * Function to wrap console.log with Logger
 * console.log를 Logger로 래핑하는 함수
 * @param message Message to log
 * @param data Additional data
 *
 * Generated by Copilot
 */
export function logInfo(message: string, data?: any): void {
  // Output directly to console, but include details only in verbose mode
  console.log(chalk.blue(`[INFO] ${message}`));
  if (data && Logger.isVerbose()) {
    console.log(data);
  }

  // Also record in logging system if needed
  if (Logger.isDebug()) {
    Logger.debug(`[INFO] ${message}`, data);
  }
}

/**
 * Function to wrap console.warn with Logger
 * console.warn을 Logger로 래핑하는 함수
 * @param message Warning message
 * @param data Additional data
 *
 * Generated by Copilot
 */
export function logWarn(message: string, data?: any): void {
  console.warn(chalk.yellow(`[WARN] ${message}`));
  if (data && Logger.isVerbose()) {
    console.warn(data);
  }

  // Also record in logging system
  Logger.debug(`[WARN] ${message}`, data);
}

/**
 * Function to wrap console.error with Logger
 * console.error를 Logger로 래핑하는 함수
 * @param message Error message
 * @param error Error object
 *
 * Generated by Copilot
 */
export function logError(message: string, error?: any): void {
  Logger.error(message, error);
}

/**
 * Function for debug level logging
 * 디버그 레벨 로깅을 위한 함수
 * @param message Debug message
 * @param data Additional data
 *
 * Generated by Copilot
 */
export function logDebug(message: string, data?: any): void {
  Logger.debug(message, data);
}

/**
 * Log a message at the specified level
 * 지정된 레벨로 메시지 로깅
 * @param level Log level
 * @param message Message to log
 * @param data Additional data
 *
 * Generated by Copilot
 */
export function log(level: LogLevel, message: string, data?: any): void {
  switch (level) {
    case LogLevel.ERROR:
      logError(message, data);
      break;
    case LogLevel.WARN:
      logWarn(message, data);
      break;
    case LogLevel.INFO:
      logInfo(message, data);
      break;
    case LogLevel.DEBUG:
    case LogLevel.TRACE:
      logDebug(message, data);
      break;
  }
}

/**
 * Track execution time of a function and log the result
 * 함수의 실행 시간을 추적하고 결과를 로깅
 * @param name Operation name
 * @param fn Function to measure
 * @returns Function result
 *
 * Generated by Copilot
 */
export async function logTime<T>(name: string, fn: () => Promise<T>): Promise<T> {
  const start = performance.now();
  try {
    const result = await fn();
    const elapsed = performance.now() - start;
    logInfo(`${name} completed in ${elapsed.toFixed(2)}ms`);
    return result;
  } catch (error) {
    const elapsed = performance.now() - start;
    logError(`${name} failed after ${elapsed.toFixed(2)}ms`, error);
    throw error;
  }
}

/**
 * Log a tabular data representation
 * 표 형식의 데이터 출력
 * @param data Object array to display
 * @param columns Optional column configuration
 *
 * Generated by Copilot
 */
export function logTable(data: any[], columns?: string[]): void {
  if (Logger.isVerbose()) {
    if (columns) {
      console.table(data, columns);
    } else {
      console.table(data);
    }
  }
}