import ora, { Ora } from 'ora';
import { EventManager, NodeEventType, NodeEventData } from '../utils/events.js';
import chalk from 'chalk';
import { I18n } from '../config/i18n.js';

/**
 * CLI에서 스피너를 관리하는 클래스
 * 노드 이벤트에 따라 스피너 상태를 관리합니다.
 *
 * Generated by Copilot
 */
export class SpinnerManager {
  private _spinner: Ora | null = null;
  private _eventManager: EventManager;
  private _i18n: I18n;
  private _isModelStreaming = false;
  private _currentNode = '';

  /**
   * SpinnerManager 생성자
   */
  constructor() {
    this._eventManager = EventManager.getInstance();
    this._i18n = I18n.getInstance();
    this._registerEventHandlers();
  }

  /**
   * 이벤트 핸들러 등록
   * 각 노드 이벤트에 대한 핸들러를 등록합니다.
   */
  private _registerEventHandlers(): void {
    this._eventManager.on(NodeEventType.START, this._handleNodeStart.bind(this));
    this._eventManager.on(NodeEventType.END, this._handleNodeEnd.bind(this));
    this._eventManager.on(NodeEventType.MODEL_START, this._handleModelStart.bind(this));
    this._eventManager.on(NodeEventType.MODEL_STREAMING, this._handleModelStreaming.bind(this));
    this._eventManager.on(NodeEventType.MODEL_END, this._handleModelEnd.bind(this));
    this._eventManager.on(NodeEventType.ERROR, this._handleError.bind(this));
  }

  /**
   * 노드 시작 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleNodeStart(data: NodeEventData): void {
    this._currentNode = data.nodeName;

    // 이전 스피너가 있다면 중지
    if (this._spinner && !this._isModelStreaming) {
      this._spinner.stop();
    }

    // 새 스피너 시작
    this._spinner = ora({
      text: this._i18n.t('node_processing', data.nodeName),
      color: 'blue'
    }).start();
  }

  /**
   * 노드 종료 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleNodeEnd(data: NodeEventData): void {
    const status = data.payload?.status || 'success';

    // 스트리밍 중이 아니고 스피너가 있을 때만 처리
    if (!this._isModelStreaming && this._spinner) {
      if (status === 'success') {
        this._spinner.succeed(this._i18n.t('node_completed', data.nodeName));
      } else {
        this._spinner.fail(this._i18n.t('node_failed', data.nodeName));
      }

      this._spinner = null;
    }
  }

  /**
   * 모델 시작 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleModelStart(data: NodeEventData): void {
    // 스피너가 있다면 모델 실행 중임을 표시
    if (this._spinner) {
      this._spinner.text = this._i18n.t('model_processing', data.nodeName);
      this._spinner.color = 'magenta';
    } else {
      this._spinner = ora({
        text: this._i18n.t('model_processing', data.nodeName),
        color: 'magenta'
      }).start();
    }
  }

  /**
   * 모델 스트리밍 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleModelStreaming(data: NodeEventData): void {
    // 첫 번째 스트리밍 토큰에서 스피너를 중지하고 스트리밍 모드로 전환
    if (!this._isModelStreaming && this._spinner) {
      this._spinner.stop();
      console.log(chalk.magenta(`\n--- ${this._i18n.t('model_streaming_start')} ---`));
      this._isModelStreaming = true;
    }

    // 스트리밍 콘텐츠 출력
    if (this._isModelStreaming && data.payload?.content) {
      process.stdout.write(data.payload.content);
    }
  }

  /**
   * 모델 종료 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleModelEnd(_data: NodeEventData): void {
    // 스트리밍 모드였다면 종료 표시
    if (this._isModelStreaming) {
      console.log(chalk.magenta(`\n--- ${this._i18n.t('model_streaming_end')} ---`));
      this._isModelStreaming = false;

      // 노드 처리 계속을 위한 새 스피너
      this._spinner = ora({
        text: this._i18n.t('node_processing', this._currentNode),
        color: 'blue'
      }).start();
    }
  }

  /**
   * 오류 이벤트 핸들러
   * @param data 이벤트 데이터
   */
  private _handleError(data: NodeEventData): void {
    // 스트리밍 모드였다면 종료 표시
    if (this._isModelStreaming) {
      console.log(chalk.red(`\n--- ${this._i18n.t('model_streaming_error')} ---`));
      this._isModelStreaming = false;
    }

    // 스피너가 있다면 오류 표시
    if (this._spinner) {
      this._spinner.fail(this._i18n.t('error_occurred'));
      this._spinner = null;
    }

    // 오류 메시지 출력
    console.error(chalk.red(`[ERROR] ${data.payload?.message || 'Unknown error'}`));
  }

  /**
   * 리소스 정리
   */
  public cleanup(): void {
    // 스피너가 있다면 중지
    if (this._spinner) {
      this._spinner.stop();
      this._spinner = null;
    }

    // 이벤트 핸들러 해제
    this._eventManager.off(NodeEventType.START, this._handleNodeStart.bind(this));
    this._eventManager.off(NodeEventType.END, this._handleNodeEnd.bind(this));
    this._eventManager.off(NodeEventType.MODEL_START, this._handleModelStart.bind(this));
    this._eventManager.off(NodeEventType.MODEL_STREAMING, this._handleModelStreaming.bind(this));
    this._eventManager.off(NodeEventType.MODEL_END, this._handleModelEnd.bind(this));
    this._eventManager.off(NodeEventType.ERROR, this._handleError.bind(this));
  }
}