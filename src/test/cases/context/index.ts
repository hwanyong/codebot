/**
 * 컨텍스트 도구 테스트 케이스
 * Context Tool Test Cases
 *
 * 컨텍스트 관련 도구의 기능을 테스트합니다.
 * Tests functionality of context related tools.
 *
 * Generated by Copilot
 */

import { TestSuite } from '../../runner.js';
import assert from 'assert';

// 테스트에 필요한 도구 가져오기
import { GetContextTool } from '../../../tools/context/getContext.js';
import { AddToContextTool } from '../../../tools/context/addToContext.js';

// 도구 인스턴스 생성
const getContextTool = new GetContextTool();
const addToContextTool = new AddToContextTool();

/**
 * 컨텍스트 도구 테스트 스위트
 */
export const contextTests: TestSuite = {
  /**
   * 테스트 전에 컨텍스트 초기화
   */
  async 'Context Tools - 초기화'() {
    // 테스트를 위해 컨텍스트 초기화
    GetContextTool.clearContext();

    // 초기 컨텍스트는 비어 있어야 함
    const result = await getContextTool.execute({});

    assert.deepStrictEqual(result, {}, '초기 컨텍스트는 비어 있어야 합니다.');
  },

  /**
   * 컨텍스트 가져오기 테스트
   */
  async 'GetContextTool - 컨텍스트 조회'() {
    // 테스트를 위해 컨텍스트 초기화
    GetContextTool.clearContext();

    // 테스트 데이터 설정
    GetContextTool.setContextValue('testKey', 'testValue');
    GetContextTool.setContextValue('numberKey', 123);

    // 컨텍스트 조회
    const result = await getContextTool.execute({});

    // 검증
    assert.strictEqual(typeof result, 'object', '결과는 객체여야 합니다.');
    assert.strictEqual(result.testKey, 'testValue', 'testKey 값이 일치해야 합니다.');
    assert.strictEqual(result.numberKey, 123, 'numberKey 값이 일치해야 합니다.');
  },

  /**
   * 컨텍스트 추가 테스트
   */
  async 'AddToContextTool - 컨텍스트 추가'() {
    // 테스트를 위해 컨텍스트 초기화
    GetContextTool.clearContext();

    // 컨텍스트에 데이터 추가
    const addResult = await addToContextTool.execute({
      key: 'newKey',
      value: 'newValue'
    });

    // 추가 결과 검증
    assert.strictEqual(addResult, true, '컨텍스트 추가가 성공해야 합니다.');

    // 컨텍스트 조회로 검증
    const getResult = await getContextTool.execute({});

    assert.strictEqual(getResult.newKey, 'newValue', '추가된 데이터가 컨텍스트에 존재해야 합니다.');
  },

  /**
   * 복잡한 데이터 테스트
   */
  async 'Context Tools - 복잡한 데이터 처리'() {
    // 테스트를 위해 컨텍스트 초기화
    GetContextTool.clearContext();

    // 복잡한 객체 데이터
    const complexData = {
      name: 'Codebot',
      version: '1.0',
      features: ['fileSystem', 'terminal', 'context'],
      settings: {
        debug: true,
        language: 'ko',
        timeout: 5000
      },
      statistics: {
        runs: 42,
        errors: 0,
        uptime: 3600
      }
    };

    // 복잡한 데이터 추가
    await addToContextTool.execute({
      key: 'config',
      value: complexData
    });

    // 컨텍스트 조회
    const result = await getContextTool.execute({});

    // 검증
    assert.deepStrictEqual(result.config, complexData, '복잡한 데이터가 온전히 유지되어야 합니다.');
    assert.strictEqual(result.config.name, 'Codebot', '중첩된 속성이 일치해야 합니다.');
    assert.strictEqual(result.config.features.length, 3, '배열 데이터가 온전히 유지되어야 합니다.');
    assert.strictEqual(result.config.settings.language, 'ko', '중첩된 객체의 속성이 일치해야 합니다.');

    // 기존 컨텍스트를 유지하면서 새 데이터 추가
    await addToContextTool.execute({
      key: 'user',
      value: {
        id: 'user123',
        role: 'admin'
      }
    });

    // 업데이트된 컨텍스트 조회
    const updatedResult = await getContextTool.execute({});

    // 검증
    assert.deepStrictEqual(updatedResult.config, complexData, '기존 데이터가 유지되어야 합니다.');
    assert.strictEqual(updatedResult.user.id, 'user123', '새 데이터가 추가되어야 합니다.');
  },

  /**
   * 오류 처리 테스트
   */
  async 'AddToContextTool - 오류 처리'() {
    // 테스트를 위해 컨텍스트 초기화
    GetContextTool.clearContext();

    // 잘못된 매개변수로 테스트 (중요: 여기서는 try-catch를 사용하지만
    // BaseTool 클래스의 매개변수 검증 기능이 이미 오류를 처리할 것임)
    try {
      // @ts-ignore - 의도적으로 잘못된 매개변수 전달
      await addToContextTool.execute({ value: 'missingKey' });
      assert.fail('잘못된 매개변수에 대한 오류가 발생해야 합니다.');
    } catch (error) {
      // 오류가 발생하면 정상
      assert.ok(error instanceof Error, '오류가 Error 인스턴스여야 합니다.');
    }

    // 컨텍스트가 수정되지 않았는지 확인
    const result = await getContextTool.execute({});
    assert.deepStrictEqual(Object.keys(result).length, 0, '오류 발생 시 컨텍스트는 수정되지 않아야 합니다.');
  }
};