/**
 * 테스트 결과를 보고하기 위한 TestReporter 클래스
 * Test Reporter Class for displaying test results
 *
 * Generated by Copilot
 */

import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import { TestResult } from './runner.js';
import { I18n } from '../config/i18n.js';

/**
 * 테스트 결과 보고 형식 옵션
 */
export interface ReporterOptions {
  logToFile?: boolean;
  logFilePath?: string;
  verbose?: boolean;
}

/**
 * 테스트 결과를 보고하는 클래스
 */
export class TestReporter {
  private _options: ReporterOptions;
  private _i18n: I18n;

  /**
   * TestReporter 클래스의 생성자
   * @param options 보고 옵션
   */
  constructor(options: ReporterOptions = {}) {
    this._options = {
      logToFile: false,
      logFilePath: './test-results.log',
      verbose: false,
      ...options
    };
    this._i18n = I18n.getInstance();
  }

  /**
   * 테스트 결과를 파일에 로깅합니다.
   * @param results 테스트 결과
   * @param categoryName 카테고리 이름
   */
  async logToFile(results: TestResult[], categoryName: string): Promise<void> {
    if (!this._options.logToFile) return;

    const logFilePath = this._options.logFilePath || './test-results.log';
    const timestamp = new Date().toISOString();

    const logData = [
      `\n==== ${this._i18n.t('test_log_header', timestamp)} ====`,
      `${this._i18n.t('test_category')}: ${categoryName}`,
      `${this._i18n.t('test_results')}:`,
      ...results.map(r => {
        return `- ${r.name}: ${r.passed ? this._i18n.t('test_passed') : this._i18n.t('test_failed')} (${r.duration}ms)` +
          (r.passed ? '' : `\n  ${this._i18n.t('error')}: ${r.message}`);
      }),
      `${this._i18n.t('test_summary')}: ${results.length} ${this._i18n.t('test_total')}, ` +
      `${results.filter(r => r.passed).length} ${this._i18n.t('test_passed')}, ` +
      `${results.filter(r => !r.passed).length} ${this._i18n.t('test_failed')}`,
      '==================================\n'
    ].join('\n');

    try {
      const dirPath = path.dirname(logFilePath);
      await fs.mkdir(dirPath, { recursive: true });
      await fs.appendFile(logFilePath, logData, 'utf8');
      console.log(chalk.gray(this._i18n.t('test_log_written', logFilePath)));
    } catch (error) {
      console.error(chalk.red(this._i18n.t('test_log_error', error instanceof Error ? error.message : String(error))));
    }
  }

  /**
   * 테스트 결과 요약을 콘솔에 표시합니다.
   * @param results 카테고리별 테스트 결과
   */
  displayOverallSummary(results: Record<string, TestResult[]>): void {
    console.log(chalk.bold(`\n${this._i18n.t('test_overall_summary')}:`));

    let totalTests = 0;
    let totalPassed = 0;
    let totalCategories = 0;

    Object.entries(results).forEach(([category, categoryResults]) => {
      totalCategories++;
      totalTests += categoryResults.length;
      totalPassed += categoryResults.filter(r => r.passed).length;

      const failed = categoryResults.filter(r => !r.passed).length;
      const resultColor = failed > 0 ? chalk.red : chalk.green;

      console.log(
        chalk.cyan(`${category}: `) +
        resultColor(`${categoryResults.length} ${this._i18n.t('test_total')}, `) +
        resultColor(`${categoryResults.length - failed} ${this._i18n.t('test_passed')}, `) +
        resultColor(`${failed} ${this._i18n.t('test_failed')}`)
      );
    });

    const totalFailed = totalTests - totalPassed;
    const overallColor = totalFailed > 0 ? chalk.red : chalk.green;

    console.log(
      chalk.bold(`\n${this._i18n.t('test_complete_summary')}: `) +
      overallColor(`${totalCategories} ${this._i18n.t('test_categories')}, `) +
      overallColor(`${totalTests} ${this._i18n.t('test_total')}, `) +
      overallColor(`${totalPassed} ${this._i18n.t('test_passed')} (${Math.round(totalPassed / totalTests * 100)}%), `) +
      overallColor(`${totalFailed} ${this._i18n.t('test_failed')} (${Math.round(totalFailed / totalTests * 100)}%)`)
    );
  }
}